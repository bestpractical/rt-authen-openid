<%INIT>
return unless (RT->Config->Get("EnableOpenId"));

use Net::OpenID::Consumer;
use LWPx::ParanoidAgent;
use Cache::FileCache;

my $openid_url = ref( $ARGS{openid} ) ? $ARGS{openid}->[0] : $ARGS{openid};
my $user;
my $check_url;

# Livejournal misencodes responses...
if ($ARGS{'openid.sig'}) {
    my $sig = $m->cgi_object->param('openid.sig') ||'';
    $sig =~ s/ /+/g;
    $m->cgi_object->param( 'openid.sig' => $sig );
}


my $root_user = RT::User->new(RT->SystemUser);
my $csr = Net::OpenID::Consumer->new(
    ua              => LWPx::ParanoidAgent->new,
    args            => \%ARGS,
    cache           => Cache::FileCache->new,
    consumer_secret => 'x'.RT->Config->Get("DatabasePassword"),
    required_root   => RT->Config->Get("WebURL"),
);


if ($openid_url) {
    if ( my $claimed_identity = $csr->claimed_identity("$openid_url")) {
        $check_url = $claimed_identity->check_url(
                return_to      => RT->Config->Get("WebURL"),
                delayed_return => 1,
                trust_root     => RT->Config->Get("WebURL"),
                );
        RT::Interface::Web::Redirect($check_url);
    } else {
        RT->Logger->error("OpenID login failure for $openid_url code $csr->{last_errcode} error $csr->{last_errtext}");
        # we should end up skipping the rest now
    }
}
if ( $ARGS{"openid.mode"} ) {
    if ( my $setup_url = $csr->user_setup_url ) {

        # redirect/link/popup user to $setup_url
        RT::Interface::Web::Redirect($setup_url);
    } elsif ( $csr->user_cancel ) {
    } elsif ( my $vident = $csr->verified_identity ) {
        $user = $vident->url;
    } else {
        die ( "Error validating identity: " . $csr->err );
    }
}

# if the user isn't logged in and we got credentials from OpenID, load them
if ( ( not $session{'CurrentUser'} or not $session{'CurrentUser'}->id ) && ($user) ) {

    # set a global user so we know elsewhere we're using OpenID for auth
    $session{'OpenID'} = $user;

    # OpenID has verified that the user has control of this e-mail address,
    # so it's okay to use it to get a valid RT user

    # we've got a valid user, so try to load
    $session{'CurrentUser'} = RT::CurrentUser->new();
    $session{'CurrentUser'}->LoadByCols( Name => $user );
    $session{'CurrentUser'}->{'OpenID'} = 1;    
    if ( $session{'CurrentUser'}->id ) {
        RT->Logger->info($session{'CurrentUser'}->Name ." logged in with openid"); 
    } else {
        my $UserObj = RT::User->new(RT->SystemUser);
        my ( $id, $msg ) = $UserObj->Create(
            Name => $user,

            #RealName => $user->{'name'},
            #EmailAddress => $user->{'email'},
            Privileged => 0,
        );
        RT->Logger->info($user ." attempted an account creation with OpenID: $msg");
        if ( $UserObj->id ) {

            # created the user, now load them as the current user
            $session{'CurrentUser'}->Load( $UserObj->id );
            $session{'i'}++;
            # redirect the user to their preference page to add more info
            RT::Interface::Web::Redirect( RT->Config->Get("WebURL") . '/User/Prefs.html' );
        } else {

            # we couldn't create the user.  abort abort abort!
            delete $session{'CurrentUser'};
            die( loc( "Cannot create user: [_1]", $msg ) );
        }
    }
}
</%INIT>
